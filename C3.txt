using System;
using System.Collections.Generic;
using System.Linq;

public class rekesz{
    int sor;
    int oszlop;
    int szint;

    public rekesz(int _sor,int _oszlop, int _szint)
    {
        this.sor = _sor;
        this.oszlop = _oszlop;
        this.szint = _szint;
    }
    public int getSor()
    {
        return sor;
    }
    public int getOszlop()
    {
        return oszlop;
    }
    public int getSzint()
    {
        return szint;
    }

}
public class rekeszek
{
    public List<rekesz>rekeszlista=new List<rekesz>();
    
    public void rekeszAdd(rekesz rekeszObj)
    {
        rekeszlista.Add(rekeszObj);
    }
    public void kiir()
    {
        Console.WriteLine("----------alkatreszek----------");
        foreach (rekesz item in rekeszlista)
        {
            Console.WriteLine(item.getSor().ToString() + ", " + item.getOszlop().ToString()+", " + item.getSzint().ToString());
        }
    }

}

public class utvonal
{
    List<rekesz>ut=new List<rekesz>();
    

    public void utAdd(rekesz rekeszObj)
    {
        ut.Add(rekeszObj);
    }

    public void kiirUtvonal()
    {
        Console.WriteLine("----------utvonal----------");
        foreach (rekesz item in ut)
        {
            Console.WriteLine(item.getSor().ToString() + ", " + item.getOszlop().ToString() + ", " + item.getSzint().ToString());
        }
    }

    public int getAbsDistance(int szam1, int szam2)
    {
        return Math.Abs(szam1 - szam2);
    }
    public void getMinDistance(ref rekeszek rekeszlista)
    {
        Dictionary<rekesz, int> tavolsagok = new Dictionary<rekesz, int>();
        rekesz utolso = ut.Last();
        int size = rekeszlista.rekeszlista.Count();
        for (int i = 0; i < size;i++) {
            foreach (rekesz item in rekeszlista.rekeszlista)
            {
                utolso = ut.Last();
                int tav = 0;
                //sortavolsag
                tav += getAbsDistance(utolso.getSor(), item.getSor()) / 2 * 2;


                if ((getAbsDistance(utolso.getSor(), item.getSor()) % 2 == 1) && ((Math.Max(utolso.getSor(), item.getSor()) % 2 == 0)))
                {
                    tav += 2;
                }
                if (tav == 0)
                {
                    tav += getAbsDistance(utolso.getOszlop(), item.getOszlop());
                }
                else if (tav != 0)
                {
                    if ((utolso.getOszlop() == 1 && item.getOszlop() == 1) || (utolso.getOszlop() == 4 && item.getOszlop() == 4))
                    {
                        tav += 2;
                    }
                    if ((utolso.getOszlop() == 2 && item.getOszlop() == 2) || (utolso.getOszlop() == 3 && item.getOszlop() == 3))
                    {
                        tav += 4;
                    }
                    if ((utolso.getOszlop() == 2 && item.getOszlop() == 3) || (utolso.getOszlop() == 3 && item.getOszlop() == 2))
                    {
                        tav += 5;
                    }
                    if ((utolso.getOszlop() == 1 && item.getOszlop() == 4) || (utolso.getOszlop() == 4 && item.getOszlop() == 1))
                    {
                        tav += 5;
                    }
                    if ((utolso.getOszlop() == 1 && item.getOszlop() == 3) || (utolso.getOszlop() == 3 && item.getOszlop() == 1))
                    {
                        tav += 4;
                    }
                    if ((utolso.getOszlop() == 2 && item.getOszlop() == 4) || (utolso.getOszlop() == 4 && item.getOszlop() == 2))
                    {
                        tav += 4;
                    }
                    if ((utolso.getOszlop() == 1 && item.getOszlop() == 2) || (utolso.getOszlop() == 2 && item.getOszlop() == 1))
                    {
                        tav += 3;
                    }
                    if ((utolso.getOszlop() == 3 && item.getOszlop() == 4) || (utolso.getOszlop() == 4 && item.getOszlop() == 3))
                    {
                        tav += 3;
                    }
                }
                tavolsagok[item] = tav;
            }
            var min = tavolsagok.Aggregate((l, r) => l.Value < r.Value ? l : r).Key;
            ut.Add(min);
            rekeszlista.rekeszlista.Remove(min);
            tavolsagok.Clear();
        }

    }
}



namespace min_ut
{
    class Program
    {

        static void Main(string[] args)
        {

            utvonal ut = new utvonal();
            ut.utAdd(new rekesz(1,1,1));
            rekeszek alkatreszek = new rekeszek();
            alkatreszek.rekeszAdd(new rekesz(6, 3, 4));
            alkatreszek.rekeszAdd(new rekesz(1, 3, 5));
            alkatreszek.rekeszAdd(new rekesz(5, 3, 2));
            alkatreszek.rekeszAdd(new rekesz(2, 3, 5));
            alkatreszek.rekeszAdd(new rekesz(2, 2, 5));
            alkatreszek.rekeszAdd(new rekesz(3, 3, 5));
            alkatreszek.rekeszAdd(new rekesz(3, 3, 4));
            //alkatreszek.rekeszAdd(new rekesz(5, 3, 5));
            //alkatreszek.rekeszAdd(new rekesz(6, 3, 5));
            //alkatreszek.rekeszAdd(new rekesz(4, 2, 5));
            //alkatreszek.rekeszAdd(new rekesz(4, 3, 5));
            //alkatreszek.rekeszAdd(new rekesz(4, 2, 2));
            alkatreszek.kiir();
            ut.getMinDistance (ref alkatreszek);
            ut.kiirUtvonal();
            alkatreszek.kiir();

        }
    }
}
